stages:
  - install
  - test
  - build        # â¬… moved up before security
  - security
  - dast
  - publish
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  COMPOSE_PROFILES: ci
  COMPOSE_PROJECT_NAME: "ciapp"
  ZAP_TARGET: "http://api:3000/api/health"
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

# -------------------------------------------------------------------
# INSTALL & TEST (Node)
# -------------------------------------------------------------------
.install_image: &install_image
  image: node:20

install:
  stage: install
  <<: *install_image
  script:
    - cd backend && npm ci
    - cd ../frontend && npm ci
  artifacts:
    paths:
      - backend/node_modules/
      - frontend/node_modules/
    expire_in: 1h

test:
  stage: test
  <<: *install_image
  script:
    - cd backend && npm test || true
  artifacts:
    when: always
    paths:
      - backend/reports/
    expire_in: 1 week

# -------------------------------------------------------------------
# BUILD IMAGES (Docker-in-Docker with TLS)
# -------------------------------------------------------------------
build_images:
  stage: build
  image: docker:25.0.3
  services:
    - name: docker:25.0.3-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker info
    - docker build -t $CI_REGISTRY_IMAGE/backend:${CI_COMMIT_SHORT_SHA} backend
    - docker build -t $CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_SHORT_SHA} frontend
    - docker save $CI_REGISTRY_IMAGE/backend:${CI_COMMIT_SHORT_SHA} -o backend-image.tar
    - docker save $CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_SHORT_SHA} -o frontend-image.tar
  artifacts:
    paths:
      - backend-image.tar
      - frontend-image.tar
    expire_in: 1 week

# -------------------------------------------------------------------
# SECURITY: Snyk (code deps)
# -------------------------------------------------------------------
snyk_scan:
  stage: security
  image: snyk/snyk:docker
  variables:
    SNYK_TOKEN: $SNYK_TOKEN
  script:
    - snyk test --json > snyk_report.json || true
    - snyk monitor || true
  artifacts:
    when: always
    paths:
      - snyk_report.json
    expire_in: 1 week
  rules:
    - if: $SNYK_TOKEN

# -------------------------------------------------------------------
# SECURITY: Trivy (scan image tarballs)
# -------------------------------------------------------------------
trivy_scan:
  stage: security
  image: aquasec/trivy:0.41.2
  needs: ["build_images"]
  script:
    - trivy image --input backend-image.tar --format json --output trivy_backend.json || true
    - trivy image --input frontend-image.tar --format json --output trivy_frontend.json || true
  artifacts:
    paths:
      - trivy_backend.json
      - trivy_frontend.json
    expire_in: 1 week

# -------------------------------------------------------------------
# DAST: OWASP ZAP
# -------------------------------------------------------------------
dast_zap:
  stage: dast
  image: docker:25.0.3
  services:
    - name: docker:25.0.3-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    # Ensure reports folder exists
    - mkdir -p $CI_PROJECT_DIR/.zap
    # Bring up services
    - docker compose -f docker-compose.yml --profile ci up -d
    # Wait until API is ready
    - chmod +x scripts/wait-for-http.sh
    - ./scripts/wait-for-http.sh "http://localhost:3000/api/health" 120
    # Run ZAP scan
    - docker run --network ${COMPOSE_PROJECT_NAME}_default -v "$CI_PROJECT_DIR/.zap:/zap/wrk" \
      owasp/zap2docker-stable zap-baseline.py \
      -t "${ZAP_TARGET}" -r zap-baseline.html -J zap.json || true
    # Move reports to GitLab artifacts folder
    - mkdir -p reports
    - mv $CI_PROJECT_DIR/.zap/zap-baseline.html reports/
    - mv $CI_PROJECT_DIR/.zap/zap.json reports/
  artifacts:
    when: always
    paths:
      - reports/zap-baseline.html
      - reports/zap.json
    expire_in: 1 week
  after_script:
    - docker compose -f docker-compose.yml --profile ci down -v || true


# -------------------------------------------------------------------
# PUBLISH to Docker Hub
# -------------------------------------------------------------------
publish_dockerhub:
  stage: publish
  image: docker:25.0.3
  services:
    - name: docker:25.0.3-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  needs: ["build_images"]
  script:
    - echo "$DOCKER_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
    - docker load -i backend-image.tar
    - docker load -i frontend-image.tar
    - docker tag $CI_REGISTRY_IMAGE/backend:${CI_COMMIT_SHORT_SHA} ${DOCKERHUB_USERNAME}/banking-backend:${CI_COMMIT_SHORT_SHA}
    - docker tag $CI_REGISTRY_IMAGE/frontend:${CI_COMMIT_SHORT_SHA} ${DOCKERHUB_USERNAME}/banking-frontend:${CI_COMMIT_SHORT_SHA}
    - docker push ${DOCKERHUB_USERNAME}/banking-backend:${CI_COMMIT_SHORT_SHA} || true
    - docker push ${DOCKERHUB_USERNAME}/banking-frontend:${CI_COMMIT_SHORT_SHA} || true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# -------------------------------------------------------------------
# DEPLOY via Docker Compose
# -------------------------------------------------------------------
deploy_compose:
  stage: deploy
  image: docker:25.0.3
  services:
    - name: docker:25.0.3-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker compose up -d
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
